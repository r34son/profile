name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        description: Environment name
        type: string
      image_id:
        type: string
        required: true
        description: Имя собранного docker-образа
      stage_name:
        type: string
        required: true
        description: Название стенда
      domain:
        type: string
        required: true
        description: Домен
    secrets:
      YC_SA_JSON_CREDENTIALS:
        description: Json, содержащий авторизованные ключи для сервисного аккаунта. Подробнее https://cloud.yandex.ru/docs/container-registry/operations/authentication#sa-json
      DOCKER_REGISTRY_PATH:
      DEPLOY_SA_ID:
      FOLDER_ID:
      TF_STATE_AWS_ACCESS_KEY_ID:
      TF_STATE_AWS_SECRET_ACCESS_KEY:
      SSH_KEY:
      AWS_S3_BUCKET:

    outputs:
      domain:
        description: Доменное имя развернутого стенда
        value: ${{ jobs.deploy.outputs.domain }}

permissions:
  contents: read

jobs:
  deploy:
    name: Terraform
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.terraform-output.outputs.domain }}/
    outputs:
      domain: ${{ steps.terraform-output.outputs.domain }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: deploy/coi-ig
    env:
      YC_SERVICE_ACCOUNT_KEY_FILE: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
      TF_CLI_CONFIG_FILE: '${{ github.workspace }}/.github/files/terraformrc'
      TF_VAR_folder_id: ${{ secrets.FOLDER_ID }}
      TF_VAR_image_url: ${{ secrets.DOCKER_REGISTRY_PATH }}:${{ inputs.image_id }}
      TF_VAR_ssh_key: ${{ secrets.SSH_KEY }}
      TF_VAR_domain: ${{ inputs.domain }}
      TF_VAR_s3_bucket: ${{ secrets.AWS_S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.TF_STATE_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_STATE_AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@a4aa98b93cab29d9b1101a6143fb8bce00e2eac4 # v2.7.1
        with:
          egress-policy: audit

      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - name: Terraform setup
        uses: hashicorp/setup-terraform@97f030cf6dc0b4f5e0da352c7bca9cca34579800 # v3.1.0
        with:
          terraform_version: '1.7.1'
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          terraform init -backend-config="key=${{ inputs.stage_name }}/terraform.tfstate"
          sudo apt install -y tini

      - name: Terraform Plan
        id: plan
        run: exec tini -s -g -- terraform plan -input=false -no-color -out tf.plan

      - name: Terraform Apply
        run: exec tini -s -g -- terraform apply -input=false tf.plan

      - name: Terraform get output
        id: terraform-output
        run: echo "domain=$(terraform output -raw domain)" >> "$GITHUB_OUTPUT"

      # - name: Purge CDN cache
      #   uses: yc-actions/yc-cdn-cache@v1
      #   with:
      #     yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
      #     cdn-resource-id: bc8eyazsip6i4r4bqjsa

  e2e-test:
    # Хороший end-to-end тест представляет из себя более сложную конструкцию, чем curl, проверяющий статус ответа главной страницы стенда. Такой простой тест использован для целей демонстрации
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@a4aa98b93cab29d9b1101a6143fb8bce00e2eac4 # v2.7.1
        with:
          egress-policy: audit

      - run: |
          curl '${{ needs.deploy.outputs.domain }}/'
