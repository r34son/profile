name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        description: Environment name
        type: string
      image_id:
        type: string
        required: true
        description: Имя собранного docker-образа
      stage_name:
        type: string
        required: true
        description: Название стенда
    secrets:
      YC_SA_JSON_CREDENTIALS:
        description: Json, содержащий авторизованные ключи для сервисного аккаунта. Подробнее https://cloud.yandex.ru/docs/container-registry/operations/authentication#sa-json
      DOCKER_REGISTRY_PATH:
      DEPLOY_SA_ID:
      FOLDER_ID:
    outputs:
      domain:
        description: Доменное имя развернутого стенда
        value: ${{ jobs.deploy-gateway.outputs.domain }}

jobs:
  deploy-container:
    name: Serverless container
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      container_id: ${{ steps.deploy-sls-container.outputs.id }}
    steps:
      - name: Deploy Serverless Container
        id: deploy-sls-container
        uses: yc-actions/yc-sls-container-deploy@v2
        with:
          # public: true
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          container-name: ${{ inputs.stage_name }}
          folder-id: ${{ secrets.FOLDER_ID }}
          revision-service-account-id: ${{ secrets.DEPLOY_SA_ID }}
          revision-image-url: ${{ secrets.DOCKER_REGISTRY_PATH }}:${{ inputs.image_id }}
          # revision-cores:
          # revision-memory:
          # revision-core-fraction:
          revision-concurrency: 8

  deploy-gateway:
    name: API Gateway
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: deploy-container
    outputs:
      domain: ${{ steps.deploy-gateway.outputs.domain }}
    steps:
      - uses: actions/checkout@v4
      # В YAML-спецификации API Gateway требуется указать идентификатор Serverless Container, в который требуется направлять трафик со стенда.
      # Поэтому мы шаблонизируем спецификацию API Gateway непосредственно в процессе развертывания, когда id контейнера нам известен
      - name: Render specification
        id: render-spec
        uses: cuchi/jinja2-action@v1.2.2
        with:
          template: apigw.yaml.j2
          output_file: apigw.yaml
          strict: true
          variables: |
            container_id=${{ needs.deploy-container.outputs.container_id }}
            sa_id=${{ secrets.DEPLOY_SA_ID }}
      - run: |
          echo "Rendered spec:"
          cat apigw.yaml
      - name: Deploy API Gateway
        id: deploy-gateway
        uses: yc-actions/yc-api-gateway-deploy@v1.0.0
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          gateway-name: ${{ inputs.stage_name }}
          folder-id: ${{ secrets.FOLDER_ID }}
          spec-file: apigw.yaml
      # - name: Purge CDN cache
      #   uses: yc-actions/yc-cdn-cache@v1
      #   with:
      #     yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
      #     cdn-resource-id: bc8eyazsip6i4r4bqjsa

  env-url:
    runs-on: ubuntu-latest
    needs: deploy-gateway
    environment:
      name: ${{ inputs.environment }}
      url: https://${{ needs.deploy-gateway.outputs.domain }}/
    steps:
      - run: echo "Successful deploy to https://${{ needs.deploy-gateway.outputs.domain }}/"

  e2e-test:
    # Хороший end-to-end тест представляет из себя более сложную конструкцию, чем curl, проверяющий статус ответа главной страницы стенда. Такой простой тест использован для целей демонстрации
    runs-on: ubuntu-latest
    needs: deploy-gateway
    steps:
      - run: |
          curl 'https://${{ needs.deploy-gateway.outputs.domain }}/'
